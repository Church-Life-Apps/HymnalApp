{"version":3,"sources":["components/LyricViewer.tsx","hooks/useFetch.tsx","components/SongViewer.tsx","views/HomePage.tsx","App.tsx"],"names":["LyricViewer","props","url","useState","title","author","lyrics","hymnalData","setHymnalData","loading","setLoading","error","setError","prevUrl","useRef","useEffect","current","fetch","then","response","ok","json","data","catch","err","console","finally","fetchHymnalData","songNumber","log","undefined","category","ScrollView","style","marginVertical","marginHorizontal","textAlign","marginBottom","verses","Object","keys","forEach","versenumber","line","trimStart","getLyrics","songsWithTwoTunes","SongViewer","num","secondTune","setSecondTune","songHasTwoTunes","includes","secondTuneSuffix","baseUrl","View","flex","checked","onChange","Device","Modal","visible","transparent","onRequestClose","setLyricsOnlyMode","onSwipeDown","enableSwipeDown","imageUrls","Image","source","uri","styles","StyleSheet","create","layout","alignItems","defaultMargin","textInput","titleContainer","flexDirection","logo","searchBar","HomePage","hymnalNumber","setHymnalNumber","searchText","setSearchText","lyricsOnlyMode","level","justifyContent","keyboardType","placeholder","onChangeText","text","isNaN","value","onPress","size","SettingsPage","SettingsStack","createStackNavigator","SettingsScreen","Navigator","Screen","name","component","HomeStack","HomeScreen","Tab","createBottomTabNavigator","App","useColorScheme","icons","EvaIconsPack","StatusBar","backgroundColor","eva","theme","NavigationContainer","DefaultTheme","screenOptions","route","tabBarIcon","iconName","focused","color","fill","width","height","marginLeft","tabBarOptions","activeTintColor","inactiveTintColor"],"mappings":"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","file":"static/js/app.6e7fde4c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text } from '@ui-kitten/components';\nimport { ScrollView } from 'react-native';\nimport fetchHymnalData from '../hooks/useFetch';\n\ninterface LyricViewProps {\n  songNumber: number;\n}\n\nconst LyricViewer: React.FC<LyricViewProps> = (props) => {\n  let url = `https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/SongsAndHymnsOfLifeLyrics/${props.songNumber}.json`;\n  let { hymnalData, loading, error } = fetchHymnalData(url);\n  console.log(hymnalData);\n  if (hymnalData == undefined) {\n    return <Text category=\"h3\">No Song Found</Text>;\n  }\n\n  return (\n    <>\n      <ScrollView style={{ marginVertical: 20, marginHorizontal: 25 }}>\n        <Text category=\"h5\" style={{ textAlign: 'center', marginBottom: 20 }}>{hymnalData.title}</Text>\n        <Text>{getLyrics(hymnalData)}</Text>\n        <Text>Author: {hymnalData.author == '' ? 'Unknown' : hymnalData.author}</Text>\n      </ScrollView>\n    </>\n  );\n\n  /**\n   * Parses all verse of the song to a string.\n   */\n  function getLyrics(data: any) {\n    if (!data) {\n      return \"Loading\"\n    }\n\n    let verses = Object.keys(data['lyrics']);\n    var lyrics = ``;\n    verses.forEach((versenumber) => {\n      lyrics += `\\n${versenumber}: `;\n      data['lyrics'][versenumber].forEach((line: String) => {\n        lyrics += `\\t${line}\\n`;\n      });\n    });\n    lyrics = lyrics.trimStart();\n    return lyrics;\n  }\n};\n\nexport default LyricViewer;","import { useState, useEffect, useRef } from \"react\";\n// This custom hook centralizes and streamlines handling of HTTP calls\nclass HymnalData{\n  lyrics: string[];\n  author: string;\n  title: string;\n}\n\nexport default function fetchHymnalData(url) {\n  let [hymnalData, setHymnalData] = useState<HymnalData>({title: \"Loading\", author: 'unknown', lyrics: []});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const prevUrl = useRef();\n\n  useEffect(() => {\n  // Only refetch if url or init params change.\n    if (prevUrl.current === url) return;\n    prevUrl.current = url;\n    fetch(url)\n      .then(response => {\n        if (response.ok) return response.json();\n        setError(response);\n      })\n      .then(data => setHymnalData(data))\n      .catch(err => {\n        console.error(err);\n        setError(err);\n      })\n      .finally(() => setLoading(false));\n  }, [url]);\n\n  return { hymnalData, loading, error };\n}","import { Toggle } from '@ui-kitten/components/ui';\nimport React, { useState } from 'react';\nimport { View, Image, Modal } from 'react-native';\nimport ImageViewer from 'react-native-image-zoom-viewer';\nimport * as Device from 'expo-device';\n\nconst baseUrl = 'https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/';\nconst hymnalPart = 'SongsAndHymnsOfLife/SHL_'; // This part can change when red book is added\nconst imageSuffix = '.png';\nconst alt = 'No Song Found';\n\nconst songsWithTwoTunes = [156, 216, 278, 478];\n\n// Props are kind of like the parameters for the constructor of this class.\ninterface SongViewProps {\n  songNumber: number;\n  setLyricsOnlyMode: (boolean) => void;\n}\n\nconst makeThreeDigits = (num: number) => {\n  if (num < 10) {\n    return `00${num}`;\n  } else if (num < 100) {\n    return `0${num}`;\n  } else {\n    return num;\n  }\n}\n\n/**\n * Song Viewer React Functional Component.\n */\nconst SongViewer: React.FC<SongViewProps> = (props) => {\n  const [secondTune, setSecondTune] = useState<boolean>(false);\n\n  let songHasTwoTunes = songsWithTwoTunes.includes(props.songNumber);\n  let secondTuneSuffix = songHasTwoTunes && secondTune ? '-B' : '';\n  let url = baseUrl + hymnalPart + makeThreeDigits(props.songNumber) + secondTuneSuffix + imageSuffix;\n\n  // TODO: Add Pinch and Zoom to image.\n  return (\n    <View style={{ flex: 1 }}>\n      {/* Second Tune Toggler  */}\n      {songHasTwoTunes ? (\n        <View>\n          <Toggle checked={secondTune} onChange={() => setSecondTune(!secondTune)}></Toggle>\n        </View>\n      ) : null}\n      { Device.brand != null ? (\n            <Modal\n            visible={true}\n            transparent={true}\n            onRequestClose={() => props.setLyricsOnlyMode(true)}\n          >\n            <ImageViewer\n              onSwipeDown={() => props.setLyricsOnlyMode(true)}\n              enableSwipeDown={true} imageUrls={[ { url: url } ]}\n            />\n          </Modal>\n          ) : (\n            <Image source={{ uri: url }} />\n          )\n      }\n      {/* image */}\n\n    </View>\n  );\n};\n\nexport default SongViewer;","import { Button, Input, Layout, Toggle } from \"@ui-kitten/components\";\nimport React, { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport LyricViewer from \"../components/LyricViewer\";\nimport SongViewer from \"../components/SongViewer\";\nimport * as Device from 'expo-device';\n\nconst HomePage = () => {\n  var [hymnalNumber, setHymnalNumber] = useState<number>(303);\n  var [searchText, setSearchText] = useState<string>('303');\n  var [lyricsOnlyMode, setLyricsOnlyMode] = useState<boolean>(true);\n\n  const onNumberChange = (text: string) => {\n    setSearchText(text);\n    setHymnalNumber(isNaN(+text) ? hymnalNumber : +text);\n    console.log(text);\n  }\n\n  return (\n    <Layout level='2' style={ styles.layout }>\n      <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n        <Input\n          keyboardType=\"number-pad\"\n          placeholder=\"Hymnal Number\"\n          style={{...styles.defaultMargin, flex: 3 }}\n          onChangeText={onNumberChange}\n          value={searchText}\n        />\n              { Device.brand != null ? (\n        <Button\n          onPress={() => {setLyricsOnlyMode(false)}}\n          style={{...styles.defaultMargin, flex: 1 }}\n          size='tiny'\n        >           Sheet Music\n        </Button>) : (\n          <></>\n        )\n        }\n\n        {/*\n        <Toggle\n          checked={lyricsOnlyMode}\n          style={{...styles.defaultMargin, flex: 1 }}\n          onChange={() => setLyricsOnlyMode(!lyricsOnlyMode)}\n        >\n          Lyrics Only\n        </Toggle>\n        */}\n      </View>\n      <View style={{flex: 8}}>\n        {lyricsOnlyMode ? <LyricViewer songNumber={hymnalNumber}/> : <SongViewer songNumber={hymnalNumber} setLyricsOnlyMode={setLyricsOnlyMode} />}\n      </View>\n    </Layout>\n  )\n};\n\nconst styles = StyleSheet.create({\n  layout: {\n    flex: 1,\n    //justifyContent: 'center',\n    alignItems: 'center',\n  },\n  defaultMargin: {\n    marginHorizontal: 20,\n    marginVertical: 0\n  },\n  textInput: {\n    //paddingHorizontal: 20, fontSize: 15, color: '#ccccef',\n    //paddingVertical: 10\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  logo: {\n    marginHorizontal: 16,\n  },\n  searchBar: {\n  }\n});\n\nexport default HomePage;","\nimport { StatusBar } from 'expo-status-bar';\nimport { Settings, useColorScheme } from \"react-native\";\nimport React, { useState } from 'react';\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider, Button, Avatar, Icon, IconRegistry, Layout, MenuItem, OverflowMenu, Text, Toggle, TopNavigation, TopNavigationAction } from '@ui-kitten/components';\nimport { EvaIconsPack } from '@ui-kitten/eva-icons';\nimport HomePage from './views/HomePage';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport {DefaultTheme,DarkTheme} from '@react-navigation/native'\n\nconst SettingsPage = () => {\n  return (\n    <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text category=\"h3\">\n        Settings\n      </Text>\n    </Layout>\n  )\n}\n\nconst SettingsStack = createStackNavigator();\n\nfunction SettingsScreen() {\n  return (\n    <SettingsStack.Navigator>\n      <SettingsStack.Screen name=\"Settings\" component={SettingsPage} />\n    </SettingsStack.Navigator>\n  )\n}\n\nconst HomeStack = createStackNavigator();\n\nfunction HomeScreen() {\n  return (\n    <HomeStack.Navigator>\n      <HomeStack.Screen name=\"Home\" component={HomePage} />\n    </HomeStack.Navigator>\n  );\n}\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <>\n      <IconRegistry icons={EvaIconsPack} />\n      <StatusBar backgroundColor=\"red\" />\n      <ApplicationProvider {...eva} theme={eva.light} >\n        <NavigationContainer theme={DefaultTheme}>\n        <Tab.Navigator\n          screenOptions={({ route }) => ({\n            tabBarIcon: ({ focused, color, size }) => {\n              let iconName;\n\n              if (route.name === 'Home') {\n                iconName = focused\n                  ? 'book-open'\n                  : 'book-open-outline';\n              } else if (route.name === 'Settings') {\n                iconName = focused ? 'settings-2' : 'settings-2-outline';\n              }\n\n              // You can return any component that you like here!\n            return <Text><Icon fill={color} name={iconName} style={{ width: size, height: size, marginLeft: 4 }} /> {'\\n'}</Text>;\n            },\n          })}\n          tabBarOptions={{\n            activeTintColor: '#ff8566',\n            inactiveTintColor: '#8F9BB3',\n          }}\n        >\n            <Tab.Screen name=\"Home\" component={HomeScreen} />\n            <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n          </Tab.Navigator>\n        </NavigationContainer>\n      </ApplicationProvider>\n    </>\n  );\n}"],"sourceRoot":""}